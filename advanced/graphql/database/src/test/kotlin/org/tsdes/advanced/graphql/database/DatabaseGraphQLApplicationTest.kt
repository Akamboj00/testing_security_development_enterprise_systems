package org.tsdes.advanced.graphql.database

import io.restassured.RestAssured
import io.restassured.http.ContentType
import org.hamcrest.CoreMatchers
import org.hamcrest.Matchers
import org.junit.Before
import org.junit.Test
import org.junit.runner.RunWith
import org.springframework.boot.test.context.SpringBootTest
import org.springframework.boot.web.server.LocalServerPort
import org.springframework.test.context.junit4.SpringRunner


@RunWith(SpringRunner::class)
@SpringBootTest(classes = [DatabaseGraphQLApplication::class],
        webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
class DatabaseGraphQLApplicationTest{


    @LocalServerPort
    protected var port = 0


    @Before
    fun clean() {

        // RestAssured configs shared by all the tests
        RestAssured.baseURI = "http://localhost"
        RestAssured.port = port
        RestAssured.basePath = "/graphql"
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails()
    }

    //-------------------------------------------------------------------------------
    //-- these test are the similar to the tests in Resolver module, but with
    //-- no checks on IDs (as those are generated by Hibernate)

    @Test
    fun testBaseGet() {

        RestAssured.given().accept(ContentType.JSON)
                .queryParam("query", "{allPosts{id}}")
                .get()
                .then()
                .statusCode(200)
                .body("$", Matchers.hasKey("data"))
                .body("$", Matchers.not(Matchers.hasKey("errors")))
                .body("data.allPosts.size()", CoreMatchers.equalTo(3))
                //.body("data.allPosts.id", CoreMatchers.hasItems("0", "1", "2"))
    }

    @Test
    fun testGetWithAuthors() {

        RestAssured.given().accept(ContentType.JSON)
                .queryParam("query", "{allPosts{id,author{name}}}")
                .get()
                .then()
                .statusCode(200)
                .body("$", Matchers.hasKey("data"))
                .body("$", Matchers.not(Matchers.hasKey("errors")))
                .body("data.allPosts.size()", CoreMatchers.equalTo(3))
                //.body("data.allPosts.id", CoreMatchers.hasItems("0", "1", "2"))
                .body("data.allPosts.author.name", CoreMatchers.hasItems("Foo", "John"))
    }

    @Test
    fun testNestingCyclePostToCommentsToParentPost() {

        RestAssured.given().accept(ContentType.JSON)
                .queryParam("query", "{allPosts{id,author{name},text,comments{id,text,author{name},parentPost{id,text}}}}\n")
                .get()
                .then()
                .statusCode(200)
                .body("$", Matchers.hasKey("data"))
                .body("$", Matchers.not(Matchers.hasKey("errors")))
                .body("data.allPosts.size()", CoreMatchers.equalTo(3))
                //.body("data.allPosts.id", CoreMatchers.hasItems("0", "1", "2"))
                //.body("data.allPosts.comments.parentPost.id.flatten()", CoreMatchers.hasItems("0", "1"))
                //.body("data.allPosts.comments.parentPost.id.flatten()", Matchers.not(CoreMatchers.hasItems("2")))
    }



    //-------------------------------------------------------------------------------
    //-- here, we extract the DTOs


}