<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>
    <artifactId>frontend</artifactId>
    <packaging>war</packaging>

    <parent>
        <groupId>org.tsdes.jee.jsf</groupId>
        <artifactId>jacoco</artifactId>
        <version>0.0.1-SNAPSHOT</version>
    </parent>


    <dependencies>

        <!-- Note the dependency to the other module -->
        <dependency>
            <groupId>org.tsdes.jee.jsf</groupId>
            <artifactId>backend</artifactId>
            <!--
                For the version, we use a Maven property so we do not need to update it every
                time we make a new release
            -->
            <version>${project.version}</version>
        </dependency>


        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
        </dependency>

        <dependency>
            <groupId>javax</groupId>
            <artifactId>javaee-api</artifactId>
        </dependency>

        <!-- JBoss JEE -->
        <dependency>
            <groupId>org.jboss.spec.javax.faces</groupId>
            <artifactId>jboss-jsf-api_2.2_spec</artifactId>
        </dependency>
        <dependency>
            <groupId>org.jboss.spec.javax.ejb</groupId>
            <artifactId>jboss-ejb-api_3.2_spec</artifactId>
        </dependency>
        <dependency>
            <groupId>org.jboss.spec.javax.annotation</groupId>
            <artifactId>jboss-annotations-api_1.2_spec</artifactId>
        </dependency>
        <dependency>
            <groupId>org.jboss.spec.javax.servlet</groupId>
            <artifactId>jboss-servlet-api_3.1_spec</artifactId>
        </dependency>

        <dependency>
            <groupId>org.jboss.resteasy</groupId>
            <artifactId>resteasy-client</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.seleniumhq.selenium</groupId>
            <artifactId>selenium-java</artifactId>
        </dependency>

    </dependencies>

    <profiles>
        <profile>
            <id>selenium</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-failsafe-plugin</artifactId>
                    </plugin>
                    <plugin>
                        <groupId>org.wildfly.plugins</groupId>
                        <artifactId>wildfly-maven-plugin</artifactId>
                        <configuration>
                            <!--
                                Here we run Wildfly on a separate process, on which we need to activate JaCoCo instrumentation.
                                This is achieved by using "Java Agent" technology, which is a way to attach a bytecode
                                instrumentation on every single class loader used in the target process.
                                This is done by specifying which JAR file contains the Agent.
                                Here,  org.jacoco.agent-${version.jacoco}-runtime.jar contains the agent.
                                So we need to point to the JAR file stored in the local ~/.m2 Maven repository.
                                To make the build resilient to changes (eg a new version of JaCoCo), this path string
                                is not only parameterized, but it also uses ${fs} to be able to be used on both Windows
                                and Linux/Mac machines.
                                Recall that in the root we have
                                 <fs>${file.separator}</fs>
                                 so we use ${fs} just because it is shorter than typing ${file.separator}
                            -->
                            <java-opts>
                                -javaagent:${settings.localRepository}${fs}org${fs}jacoco${fs}org.jacoco.agent${fs}${version.jacoco}${fs}org.jacoco.agent-${version.jacoco}-runtime.jar=destfile=${basedir}${fs}target${fs}jacoco-it.exec
                            </java-opts>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>


    <build>
        <plugins>

            <!-- make sure we calculate code coverage -->
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
            </plugin>

            <!-- Make sure that Wildfly is automatically downloaded and installed -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
            </plugin>

        </plugins>
    </build>

</project>